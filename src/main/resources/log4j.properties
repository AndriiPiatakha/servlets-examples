# Define the root logger with appender file
log = ./log4j
log4j.rootLogger = DEBUG, FILE
log4j.logger.logging.log4j=DEBUG, FILE2
# log4j.logger.[logger-name]=level, appender1,appender..n

# Define the file appender
log4j.appender.FILE=org.apache.log4j.FileAppender
log4j.appender.FILE.File=${log}/log.out
# Define the layout for file appender
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
#log4j.appender.FILE.layout.conversionPattern=%m%n
log4j.appender.FILE.layout.ConversionPattern=%d{yyyy-MM-dd}-%t-%x-%-5p-%-10c:%m%n
#log4j.appender.FILE.layout.ConversionPattern=%d{yyyy-MM-dd}-%t-%x-%-5p-%-c{2}:%m%n

log4j.appender.FILE2=org.apache.log4j.FileAppender
log4j.appender.FILE2.File=${log}/log2.out
log4j.appender.FILE2.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE2.layout.ConversionPattern=%d{yyyy-MM-dd hh:mm:ss}-%t-%x-%-5p-%-10c:%m%n



#===================== FILE APPENDER CONFIGURATION
## Define the root logger with appender file
#log4j.rootLogger = DEBUG, FILE
#
## Define the file appender
#log4j.appender.FILE=org.apache.log4j.FileAppender
#
## Set the name of the file
#log4j.appender.FILE.File=${log}/log.out
#
## Set the immediate flush to true (default)
#log4j.appender.FILE.ImmediateFlush=true
#
## Set the threshold to debug mode
#log4j.appender.FILE.Threshold=debug
#
## Set the append to false, overwrite
#log4j.appender.FILE.Append=false
#
## Define the layout for file appender
#log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
#log4j.appender.FILE.layout.conversionPattern=%m%n



#=========================== XML CONFIGURATION file appender
#<?xml version="1.0" encoding="UTF-8" ?>
#<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
#<log4j:configuration>
#
#<appender name="FILE" class="org.apache.log4j.FileAppender">
#
#   <param name="file" value="${log}/log.out"/>
#   <param name="immediateFlush" value="true"/>
#   <param name="threshold" value="debug"/>
#   <param name="append" value="false"/>
#   
#   <layout class="org.apache.log4j.PatternLayout">
#      <param name="conversionPattern" value="%m%n"/>
#   </layout>
#</appender>
#
#<logger name="log4j.rootLogger" additivity="false">
#   <level value="DEBUG"/>
#   <appender-ref ref="FILE"/>
#</logger>
#
#</log4j:configuration>



#======================== WRITE TO MULTIPLE FILES RollingFileAppender
## Define the root logger with appender file
#log4j.rootLogger = DEBUG, FILE
#
## Define the file appender
#log4j.appender.FILE=org.apache.log4j.RollingFileAppender
#
## Set the name of the file
#log4j.appender.FILE.File=${log}/log.out
#
## Set the immediate flush to true (default)
#log4j.appender.FILE.ImmediateFlush=true
#
## Set the threshold to debug mode
#log4j.appender.FILE.Threshold=debug
#
## Set the append to false, should not overwrite
#log4j.appender.FILE.Append=true
#
## Set the maximum file size before rollover
#log4j.appender.FILE.MaxFileSize=5KB
#
## Set the the backup index
#log4j.appender.FILE.MaxBackupIndex=2

# once the second log file reaches the maximum size, the first log file will be erased and thereafter, all the logging information will be rolled back to the first log file.

## Define the layout for file appender
#log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
#log4j.appender.FILE.layout.conversionPattern=%m%n



#================ EACH DAY
#DatePattern	Description
#'.' yyyy-MM	Roll over at the end of each month and at the beginning of the next month.
#'.' yyyy-MM-dd	Roll over at midnight each day. This is the default value.
#'.' yyyy-MM-dd-a	Roll over at midday and midnight of each day.
#'.' yyyy-MM-dd-HH	Roll over at the top of every hour.
#'.' yyyy-MM-dd-HH-mm	Roll over every minute.
#'.' yyyy-ww	Roll over on the first day of each week depending upon the locale.
## Define the root logger with appender file
#log4j.rootLogger = DEBUG, FILE
#
## Define the file appender
#log4j.appender.FILE=org.apache.log4j.DailyRollingFileAppender
#
## Set the name of the file
#log4j.appender.FILE.File=${log}/log.out
#
## Set the immediate flush to true (default)
#log4j.appender.FILE.ImmediateFlush=true
#
## Set the threshold to debug mode
#log4j.appender.FILE.Threshold=debug
#
## Set the append to false, should not overwrite
#log4j.appender.FILE.Append=true
#
## Set the DatePattern
#log4j.appender.FILE.DatePattern='.' yyyy-MM-dd-a
#
## Define the layout for file appender
#log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
#log4j.appender.FILE.layout.conversionPattern=%m%n





===================== LAYOT CONFIG
#Conversion Character	Meaning
#c	Used to output the category of the logging event. For example, for the category name "a.b.c" the pattern %c{2} will output "b.c".
#C	Used to output the fully qualified class name of the caller issuing the logging request. For example, for the class name "org.apache.xyz.SomeClass", the pattern %C{1} will output "SomeClass".
#d	Used to output the date of the logging event. For example, %d{HH:mm:ss,SSS} or %d{dd MMM yyyy HH:mm:ss,SSS}.
#F	Used to output the file name where the logging request was issued.
#l	Used to output location information of the caller which generated the logging event.
#L	Used to output the line number from where the logging request was issued.
#m	Used to output the application supplied message associated with the logging event.
#M	Used to output the method name where the logging request was issued.
#n	Outputs the platform dependent line separator character or characters.
#p	Used to output the priority of the logging event.
#r	Used to output the number of milliseconds elapsed from the construction of the layout until the creation of the logging event.
#t	Used to output the name of the thread that generated the logging event.
#x	Used to output the NDC (nested diagnostic context) associated with the thread that generated the logging event.
#X	The X conversion character is followed by the key for the MDC. For example, X{clientIP} will print the information stored in the MDC against the key clientIP.
#%	The literal percent sign. %% will print a % sign.


## Define the root logger with appender file
#log = /usr/home/log4j
#log4j.rootLogger = DEBUG, FILE
#
## Define the file appender
#log4j.appender.FILE=org.apache.log4j.FileAppender
#log4j.appender.FILE.File=${log}/log.out
#
## Define the layout for file appender
#log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
#log4j.appender.FILE.layout.ConversionPattern=%d{yyyy-MM-dd}-%t-%x-%-5p-%-10c:%m%n






